<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<title>INTUIT.ru::Интернет-Университет Информационных Технологий</title>
<link href="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/printabl.css" type="text/css" rel="stylesheet">
</head>
<body leftmargin="6" topmargin="6" marginheight="6" marginwidth="6">


<div align="left">
<span style="color: #000000; font-weight: bold;">
&nbsp;&nbsp;
<span style="font-size:12pt;">Интернет-Университет Информационных Технологий</span>
</span>
</div>

&nbsp;&nbsp;
<span align="rright" style="color: #330066; text-decoration:underline;">http://www.INTUIT.ru</span>


<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr><td height="8" colspan=3><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="8"></td></tr>
<tr><td class="orang" height="1" colspan=3><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="1"></td></tr>
<tr><td height="8" colspan=3><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="8"></td></tr>
<tr valign="top">
<td><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="8" height="1"></td>
<td>
	<!-- content -->
	<table border="0" cellpadding="0" cellspacing="0" width="100%">
	<tr><td class="head">Основы операционных систем</td></tr>
<tr><td height="4"><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="4"></td></tr>
	<tr><td class="orang" height="1"><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="1"></td></tr>
	<tr><td height="8"><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="8"></td></tr>
	<tr><td><span class="headsub">


8. Лекция:

 Организация памяти компьютера. Простейшие схемы управления памятью: версия для печати и PDA</span>

<br>
<span class="rtxt">В настоящей лекции рассматриваются простейшие способы управления памятью в ОС. Физическая память компьютера имеет иерархическую структуру. Программа представляет собой набор сегментов в логическом адресном пространстве. ОС осуществляет связывание логических и физических адресных пространств.
</span>

</td></tr>

	<tr><td height="8"><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="8"></td></tr>
	<tr><td class="orang" height="1"><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="1"></td></tr>
	<tr><td height="8"><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="8"></td></tr>
	<tr><td>


<h3 >Введение</h3><p  id="id_1">Главная задача компьютерной системы – выполнять программы. Программы вместе с данными, к которым они имеют доступ, в процессе выполнения должны (по крайней мере частично) находиться в <span class="keyword">оперативной памяти</span>. Операционной системе приходится решать задачу распределения памяти между пользовательскими процессами и компонентами ОС. Эта деятельность называется управлением памятью. Таким образом, память (storage, memory) является важнейшим ресурсом, требующим тщательного управления. В недавнем прошлом память была самым дорогим ресурсом.</p><div  class="lecture_mark" id="mark_1"></div><p  id="id_2">Часть ОС, которая отвечает за управление памятью, называется менеджером памяти. </p><div  class="lecture_mark" id="mark_2"></div><h4 >Физическая организация памяти компьютера</h4><p  id="id_3">Запоминающие устройства компьютера разделяют, как минимум, на два уровня: <span class="keyword">основную</span> (главную, <span class="keyword">оперативную</span>, <span class="keyword">физическую</span>) и вторичную (внешнюю) память. </p><div  class="lecture_mark" id="mark_3"></div><p  id="id_4"><a name="keyword-context.1"></a><span class="keyword_def">Основная память</span> представляет собой упорядоченный массив однобайтовых ячеек, каждая из которых имеет свой уникальный адрес (номер). Процессор извлекает команду из <span class="keyword">основной памяти</span>, декодирует и выполняет ее. Для выполнения команды могут потребоваться обращения еще к нескольким ячейкам <span class="keyword">основной памяти</span>. Обычно <span class="keyword">основная память</span> изготавливается с применением полупроводниковых технологий и теряет свое содержимое при отключении питания. </p><div  class="lecture_mark" id="mark_4"></div><p  id="id_5">Вторичную память (это главным образом диски) также можно рассматривать как одномерное линейное <span class="keyword">адресное пространство</span>, состоящее из последовательности байтов. В отличие от <span class="keyword">оперативной памяти</span>, она является энергонезависимой, имеет существенно большую емкость и используется в качестве расширения <span class="keyword">основной памяти</span>. </p><div  class="lecture_mark" id="mark_5"></div><p  id="id_6">Эту схему можно дополнить еще несколькими промежуточными уровнями, как показано на <a href="">рис. 8.1</a>. Разновидности памяти могут быть объединены в <span class="keyword">иерархию</span> по убыванию времени доступа, возрастанию цены и увеличению емкости. </p><div  class="lecture_mark" id="mark_6"></div><p  align="left" id="id_7"><a name="image.8.1"></a><div><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/8-100000.gif" alt="Иерархия памяти" width="547" height="243"></div><br><b>Рис. 8.1.</b> 
        Иерархия памяти</p><div  class="lecture_mark" id="mark_7"></div><p  id="id_8">Многоуровневую схему используют следующим образом. Информация, которая находится в памяти верхнего уровня, обычно хранится также на уровнях с большими номерами. Если процессор не обнаруживает нужную информацию на i-м уровне, он начинает искать ее на следующих уровнях. Когда нужная информация найдена, она переносится в более быстрые уровни. </p><div  class="lecture_mark" id="mark_8"></div><h5 >Локальность</h5><p  id="id_9">Оказывается, при таком способе организации по мере снижения скорости доступа к уровню памяти снижается также и частота обращений к нему. </p><div  class="lecture_mark" id="mark_9"></div><p  id="id_10">Ключевую роль здесь играет <a name="keyword-context.2"></a>свойство реальных программ, в течение ограниченного отрезка времени способных работать с небольшим набором адресов памяти. Это эмпирически наблюдаемое свойство известно как <span class="keyword_def">принцип локальности</span> или локализации обращений. </p><div  class="lecture_mark" id="mark_10"></div><p  id="id_11">Свойство локальности (соседние в пространстве и времени объекты характеризуются похожими свойствами) присуще не только функционированию ОС, но и природе вообще. В случае ОС свойство локальности объяснимо, если учесть, как пишутся программы и как хранятся данные, то есть обычно в течение какого-то отрезка времени ограниченный фрагмент кода работает с ограниченным набором данных. Эту часть кода и данных удается разместить в памяти с быстрым доступом. В результате реальное время доступа к памяти определяется временем доступа к верхним уровням, что и обусловливает эффективность использования <span class="keyword">иерархической</span> схемы. Надо сказать, что описываемая организация вычислительной системы во многом имитирует деятельность человеческого мозга при переработке информации. Действительно, решая конкретную проблему, человек работает с небольшим объемом информации, храня не относящиеся к делу сведения в своей памяти или во внешней памяти (например, в книгах).</p><div  class="lecture_mark" id="mark_11"></div><p  id="id_12">Кэш процессора обычно является частью аппаратуры, поэтому менеджер памяти ОС занимается распределением информации главным образом в <span class="keyword">основной</span> и внешней памяти компьютера. В некоторых схемах потоки между <span class="keyword">оперативной</span> и внешней памятью регулируются программистом (см. например, далее <span class="keyword">оверлейные структуры</span>), однако это связано с затратами времени программиста, так что подобную деятельность стараются возложить на ОС. </p><div  class="lecture_mark" id="mark_12"></div><p  id="id_13">Адреса в <span class="keyword">основной памяти</span>, характеризующие реальное расположение данных в <span class="keyword">физической памяти</span>, называются физическими адресами. Набор физических адресов, с которым работает программа, называют физическим <span class="keyword">адресным пространством</span>.</p><div  class="lecture_mark" id="mark_13"></div><h4 >Логическая память</h4><p  id="id_14">Аппаратная организация памяти в виде линейного набора ячеек не соответствует представлениям программиста о том, как организовано хранение программ и данных. Большинство программ представляет собой набор модулей, созданных независимо друг от друга. Иногда все модули, входящие в состав процесса, располагаются в памяти один за другим, образуя линейное пространство адресов. Однако чаще модули помещаются в разные области памяти и используются по-разному. </p><div  class="lecture_mark" id="mark_14"></div><p  id="id_15">Схема управления памятью, поддерживающая этот взгляд пользователя на то, как хранятся программы и данные, называется сегментацией. <a name="keyword-context.3"></a><span class="keyword_def">Сегмент</span> – область памяти определенного назначения, внутри которой поддерживается линейная адресация. <span class="keyword">Сегменты</span> содержат процедуры, массивы, стек или скалярные величины, но обычно не содержат информацию смешанного типа. </p><div  class="lecture_mark" id="mark_15"></div><p  id="id_16">По-видимому, вначале <span class="keyword">сегменты</span> памяти появились в связи с необходимостью обобществления процессами фрагментов программного кода (текстовый редактор, тригонометрические библиотеки и т. д.), без чего каждый процесс должен был хранить в своем <span class="keyword">адресном пространстве</span> дублирующую информацию. Эти отдельные участки памяти, хранящие информацию, которую система отображает в память нескольких процессов, получили название <span class="keyword">сегментов</span>. Память, таким образом, перестала быть линейной и превратилась в двумерную. Адрес состоит из двух компонентов: номер <span class="keyword">сегмента</span>, смещение внутри <span class="keyword">сегмента</span>. Далее оказалось удобным размещать в разных <span class="keyword">сегментах</span> различные компоненты процесса (код программы, данные, стек и т. д.). Попутно выяснилось, что можно контролировать характер работы с конкретным <span class="keyword">
сегментом</span>, приписав ему атрибуты, например права доступа или типы операций, которые разрешается производить с данными, хранящимися в <span class="keyword">сегменте</span>. </p><div  class="lecture_mark" id="mark_16"></div><p  align="left" id="id_17"><a name="image.8.2"></a><div><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/8-200000.gif" alt="Расположение сегментов процессов в памяти компьютера" width="547" height="340"></div><br><b>Рис. 8.2.</b> 
        Расположение сегментов процессов в памяти компьютера</p><div  class="lecture_mark" id="mark_17"></div><p  id="id_18">Некоторые <span class="keyword">сегменты</span>, описывающие <span class="keyword">адресное пространство</span> процесса, показаны на <a href="">рис. 8.2</a>. Более подробная информация о типах <span class="keyword">сегментов</span> имеется в лекции 10.</p><div  class="lecture_mark" id="mark_18"></div><p  id="id_19">Большинство современных ОС поддерживают сегментную организацию памяти. В некоторых архитектурах (Intel, например) сегментация поддерживается оборудованием.</p><div  class="lecture_mark" id="mark_19"></div><p  id="id_20">Адреса, к которым обращается процесс, таким образом, отличаются от адресов, реально существующих в <span class="keyword">оперативной памяти</span>. В каждом конкретном случае используемые программой адреса могут быть представлены различными способами. Например, адреса в исходных текстах обычно символические. Компилятор связывает эти символические адреса с перемещаемыми адресами (такими, как n байт от начала модуля). Подобный адрес, сгенерированный программой, обычно называют логическим (в системах с виртуальной памятью он часто называется виртуальным) адресом. Совокупность всех логических адресов называется логическим (виртуальным) <span class="keyword">адресным пространством</span>. </p><div  class="lecture_mark" id="mark_20"></div><h4 >Связывание адресов</h4><p  id="id_21">Итак <a name="keyword-context.4"></a>логические и физические <span class="keyword">адресные пространства</span> ни по организации, ни по размеру не соответствуют друг другу. Максимальный размер логического <span class="keyword">адресного пространства</span> обычно определяется разрядностью процессора (например, 2<sup>32</sup>) и в современных системах значительно превышает размер физического <span class="keyword">адресного пространства</span>. Следовательно, процессор и ОС должны быть способны отобразить ссылки в коде программы в реальные физические адреса, соответствующие текущему расположению программы в <span class="keyword">основной памяти</span>. Такое отображение адресов называют <span class="keyword_def">трансляцией (привязкой) адреса</span> или <span class="keyword_def">связыванием адресов</span> (см. <a href="">рис. 8.3</a>). </p><div  class="lecture_mark" id="mark_21"></div><p  id="id_22"><span class="keyword">Связывание</span> логического адреса, порожденного оператором программы, с физическим должно быть осуществлено до начала выполнения оператора или в момент его выполнения. Таким образом, привязка инструкций и данных к памяти в принципе может быть сделана на следующих шагах [<a target="_blank" href="http://www.intuit.ru/department/os/osintro/popup.lit.html#8">Silberschatz, 2002</a>].</p><div  class="lecture_mark" id="mark_22"></div><ul  id="id_23"><li>Этап компиляции (Compile time). Когда на стадии компиляции известно точное место размещения процесса в памяти, тогда непосредственно генерируются физические адреса. При изменении стартового адреса программы необходимо перекомпилировать ее код. В качестве примера можно привести .com программы MS-DOS, которые связывают ее с физическими адресами на стадии компиляции.</li><li>Этап загрузки (Load time). Если информация о размещении программы на стадии компиляции отсутствует, компилятор генерирует перемещаемый код. В этом случае окончательное <span class="keyword">связывание</span> откладывается до момента загрузки. Если стартовый адрес меняется, нужно всего лишь перезагрузить код с учетом измененной величины.</li><li>Этап выполнения (Execution time). Если процесс может быть перемещен во время выполнения из одной области памяти в другую, <span class="keyword">связывание</span> откладывается до стадии выполнения. Здесь желательно наличие специализированного оборудования, например регистров перемещения. Их значение прибавляется к каждому адресу, сгенерированному процессом. Большинство современных ОС осуществляет <span class="keyword">трансляцию адресов</span> на этапе выполнения, используя для этого специальный аппаратный механизм (см. лекцию 9).</li></ul><div  class="lecture_mark" id="mark_23"></div><p  align="left" id="id_27"><a name="image.8.3"></a><div><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/8-300000.gif" alt="Формирование логического адреса и связывание логического адреса с физическим" width="547" height="303"></div><br><b>Рис. 8.3.</b> 
        Формирование логического адреса и связывание логического адреса с физическим</p><div  class="lecture_mark" id="mark_27"></div><h4 >Функции системы управления памятью</h4><p  id="id_28">Чтобы обеспечить эффективный контроль использования памяти, ОС должна выполнять следующие функции:</p><div  class="lecture_mark" id="mark_28"></div><ul  id="id_29"><li>отображение <span class="keyword">адресного пространства</span> процесса на конкретные области физической памяти;</li><li>распределение памяти между конкурирующими процессами;</li><li>контроль доступа к <span class="keyword">адресным пространствам</span> процессов; </li><li>выгрузка процессов (целиком или частично) во внешнюю память, когда в <span class="keyword">оперативной памяти</span> недостаточно места;</li><li>учет свободной и занятой памяти.</li></ul><div  class="lecture_mark" id="mark_29"></div><p  id="id_35">В следующих разделах лекции рассматривается ряд конкретных схем управления памятью. Каждая схема включает в себя определенную идеологию управления, а также алгоритмы и структуры данных и зависит от архитектурных особенностей используемой системы. Вначале будут рассмотрены простейшие схемы. Доминирующая на сегодня схема виртуальной памяти будет описана в последующих лекциях.</p><div  class="lecture_mark" id="mark_35"></div><h4 >Простейшие схемы управления памятью</h4><p  id="id_36">Первые ОС применяли очень простые методы управления памятью. Вначале каждый процесс пользователя должен был полностью поместиться в <span class="keyword">основной памяти</span>, занимать непрерывную область памяти, а система принимала к обслуживанию дополнительные пользовательские процессы до тех пор, пока все они одновременно помещались в <span class="keyword">основной памяти</span>. Затем появился "простой свопинг" (система по-прежнему размещает каждый процесс в <span class="keyword">основной памяти</span> целиком, но иногда на основании некоторого критерия целиком сбрасывает образ некоторого процесса из <span class="keyword">основной памяти</span> во внешнюю и заменяет его в <span class="keyword">основной памяти</span> образом другого процесса). Такого рода схемы имеют не только историческую ценность. В настоящее время они применяются в учебных и научно-исследовательских модельных ОС, а также в ОС для встроенных (embedded) компьютеров.</p><div  class="lecture_mark" id="mark_36"></div><h5 >Схема с фиксированными разделами</h5><p  id="id_37">Самым простым способом управления <span class="keyword">оперативной памятью</span> является ее предварительное (обычно на этапе генерации или в момент загрузки системы) разбиение на несколько разделов фиксированной величины. Поступающие процессы помещаются в тот или иной раздел. При этом происходит условное разбиение физического <span class="keyword">адресного пространства</span>. <span class="keyword">Связывание</span> логических и физических адресов процесса происходит на этапе его загрузки в конкретный раздел, иногда – на этапе компиляции.</p><div  class="lecture_mark" id="mark_37"></div><p  id="id_38">Каждый раздел может иметь свою очередь процессов, а может существовать и глобальная очередь для всех разделов(см. <a href="">рис. 8.4</a>).</p><div  class="lecture_mark" id="mark_38"></div><p  id="id_39">Эта схема была реализована в IBM OS/360 (MFT), DEC RSX-11 и ряде других систем.</p><div  class="lecture_mark" id="mark_39"></div><p  id="id_40">Подсистема управления памятью оценивает размер поступившего процесса, выбирает подходящий для него раздел, осуществляет загрузку процесса в этот раздел и настройку адресов. </p><div  class="lecture_mark" id="mark_40"></div><p  align="left" id="id_41"><a name="image.8.4"></a><div><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/8-400000.gif" alt="Схема с фиксированными разделами: (a) – с общей очередью процессов,  (b) – с отдельными очередями процессов" width="550" height="270"></div><br><b>Рис. 8.4.</b> 
        Схема с фиксированными разделами: (a) – с общей очередью процессов,  (b) – с отдельными очередями процессов</p><div  class="lecture_mark" id="mark_41"></div><p  id="id_42">Очевидный недостаток этой схемы – число одновременно выполняемых процессов ограничено числом разделов.</p><div  class="lecture_mark" id="mark_42"></div><p  id="id_43">Другим существенным недостатком является то, что предлагаемая схема сильно страдает от <a name="keyword-context.5"></a><span class="keyword_def">внутренней фрагментации</span> – потери части памяти, выделенной процессу, но не используемой им. <span class="keyword">Фрагментация</span> возникает потому, что процесс не полностью занимает выделенный ему раздел или потому, что некоторые разделы слишком малы для выполняемых пользовательских программ. </p><div  class="lecture_mark" id="mark_43"></div><h5 >Один процесс в памяти</h5><p  id="id_44">Частный случай схемы с <span class="keyword">фиксированными разделами</span> – работа менеджера памяти однозадачной ОС. В памяти размещается один пользовательский процесс. Остается определить, где располагается пользовательская программа по отношению к ОС – в верхней части памяти, в нижней или в средней. Причем часть ОС может быть в ROM (например, BIOS, драйверы устройств). Главный фактор, влияющий на это решение, – расположение вектора прерываний, который обычно локализован в нижней части памяти, поэтому ОС также размещают в нижней. Примером такой организации может служить ОС MS-DOS.</p><div  class="lecture_mark" id="mark_44"></div><p  id="id_45">Защита <span class="keyword">адресного пространства</span> ОС от пользовательской программы может быть организована при помощи одного граничного регистра, содержащего адрес границы ОС. </p><div  class="lecture_mark" id="mark_45"></div><h5 >Оверлейная структура</h5><p  id="id_46">Так как размер логического <span class="keyword">адресного пространства</span> процесса может быть больше, чем размер выделенного ему раздела (или больше, чем размер самого большого раздела), иногда используется техника, называемая оверлей (overlay) или организация структуры с перекрытием. Основная идея – держать в памяти только те инструкции программы, которые нужны в данный момент. </p><div  class="lecture_mark" id="mark_46"></div><p  id="id_47">Потребность в таком способе загрузки появляется, если логическое <span class="keyword">адресное пространство</span> системы мало, например 1 Мбайт (MS-DOS) или даже всего 64 Кбайта (PDP-11), а программа относительно велика. На современных 32-разрядных системах, где виртуальное <span class="keyword">адресное пространство</span> измеряется гигабайтами, проблемы с нехваткой памяти решаются другими способами (см. раздел "Виртуальная память").</p><div  class="lecture_mark" id="mark_47"></div><p  align="left" id="id_48"><a name="image.8.5"></a><div><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/8-500000.gif" alt="Организация структуры с перекрытием.  Можно поочередно загружать в память ветви A-B, A-C-D и A-C-E программы" width="550" height="190"></div><br><b>Рис. 8.5.</b> 
        Организация структуры с перекрытием.  Можно поочередно загружать в память ветви A-B, A-C-D и A-C-E программы</p><div  class="lecture_mark" id="mark_48"></div><p  id="id_49">Коды ветвей <span class="keyword">оверлейной структуры</span> программы находятся на диске как абсолютные образы памяти и считываются драйвером оверлеев при необходимости. Для описания <span class="keyword">оверлейной структуры</span> обычно используется специальный несложный язык (overlay description language). Совокупность файлов исполняемой программы дополняется файлом (обычно с расширением .odl), описывающим дерево вызовов внутри программы. Для примера, приведенного на <a href="">рис. 8.5</a>, текст этого файла может выглядеть так:</p><div  class="lecture_mark" id="mark_49"></div><div  class="example"><pre>
A-(B,C)
C-(D,E)
</pre></div><p  id="id_51">Синтаксис подобного файла может распознаваться загрузчиком. Привязка к <span class="keyword">физической памяти</span> происходит в момент очередной загрузки одной из ветвей программы.</p><div  class="lecture_mark" id="mark_51"></div><p  id="id_52">Оверлеи могут быть полностью реализованы на пользовательском уровне в системах с простой файловой структурой. ОС при этом лишь делает несколько больше операций ввода-вывода. Типовое решение – порождение линкером специальных команд, которые включают загрузчик каждый раз, когда требуется обращение к одной из перекрывающихся ветвей программы.</p><div  class="lecture_mark" id="mark_52"></div><p  id="id_53">Тщательное проектирование <span class="keyword">оверлейной структуры</span> отнимает много времени и требует знания устройства программы, ее кода, данных и языка описания <span class="keyword">оверлейной структуры</span>. По этой причине применение оверлеев ограничено компьютерами с небольшим логическим <span class="keyword">адресным пространством</span>. Как мы увидим в дальнейшем, проблема оверлейных <span class="keyword">сегментов</span>, контролируемых программистом, отпадает благодаря появлению систем виртуальной памяти.</p><div  class="lecture_mark" id="mark_53"></div><p  id="id_54">Заметим, что возможность организации структур с перекрытиями во многом обусловлена свойством локальности, которое позволяет хранить в памяти только ту информацию, которая необходима в конкретный момент вычислений.</p><div  class="lecture_mark" id="mark_54"></div><h5 >Динамическое распределение. Свопинг</h5><p  id="id_55">Имея дело с пакетными системами, можно обходиться <span class="keyword">фиксированными разделами</span> и не использовать ничего более сложного. В системах с разделением времени возможна ситуация, когда память не в состоянии содержать все пользовательские процессы. Приходится прибегать к свопингу (swapping) – перемещению процессов из главной памяти на диск и обратно целиком. Частичная выгрузка процессов на диск осуществляется в системах со страничной организацией (paging) и будет рассмотрена ниже.</p><div  class="lecture_mark" id="mark_55"></div><p  id="id_56">Выгруженный процесс может быть возвращен в то же самое <span class="keyword">адресное пространство</span> или в другое. Это ограничение диктуется методом <span class="keyword">связывания</span>. Для схемы <span class="keyword">связывания</span> на этапе выполнения можно загрузить процесс в другое место памяти.</p><div  class="lecture_mark" id="mark_56"></div><p  id="id_57">Свопинг не имеет непосредственного отношения к управлению памятью, скорее он связан с подсистемой планирования процессов. Очевидно, что свопинг увеличивает время переключения контекста. Время выгрузки может быть сокращено за счет организации специально отведенного пространства на диске (раздел для свопинга). Обмен с диском при этом осуществляется блоками большего размера, то есть быстрее, чем через стандартную файловую систему. Во многих версиях Unix свопинг начинает работать только тогда, когда возникает необходимость в снижении загрузки системы. </p><div  class="lecture_mark" id="mark_57"></div><h5 >Схема с переменными разделами</h5><p  id="id_58">В принципе, система свопинга может базироваться на <span class="keyword">фиксированных разделах</span>. Более эффективной, однако, представляется схема динамического распределения или схема с переменными разделами, которая может использоваться и в тех случаях, когда все процессы целиком помещаются в памяти, то есть в отсутствие свопинга. В этом случае вначале вся память свободна и не разделена заранее на разделы. Вновь поступающей задаче выделяется строго необходимое количество памяти, не более. После выгрузки процесса память временно освобождается. По истечении некоторого времени память представляет собой переменное число разделов разного размера (<a href="">рис. 8.6</a>). Смежные свободные участки могут быть объединены.</p><div  class="lecture_mark" id="mark_58"></div><p  align="left" id="id_59"><a name="image.8.6"></a><div><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/8-600000.gif" alt="Динамика распределения памяти между процессами (серым цветом показана неиспользуемая память)" width="550" height="252"></div><br><b>Рис. 8.6.</b> 
        Динамика распределения памяти между процессами (серым цветом показана неиспользуемая память)</p><div  class="lecture_mark" id="mark_59"></div><p  id="id_60">В какой раздел помещать процесс? Наиболее распространены три стратегии.</p><div  class="lecture_mark" id="mark_60"></div><ul  id="id_61"><li>Стратегия первого подходящего (First fit). Процесс помещается в первый подходящий по размеру раздел.</li><li>Стратегия наиболее подходящего (Best fit). Процесс помещается в тот раздел, где после его загрузки останется меньше всего свободного места.</li><li>Стратегия наименее подходящего (Worst fit). При помещении в самый большой раздел в нем остается достаточно места для возможного размещения еще одного процесса. </li></ul><div  class="lecture_mark" id="mark_61"></div><p  id="id_65">Моделирование показало, что доля полезно используемой памяти в первых двух случаях больше, при этом первый способ несколько быстрее. Попутно заметим, что перечисленные стратегии широко применяются и другими компонентами ОС, например для размещения файлов на диске.</p><div  class="lecture_mark" id="mark_65"></div><p  id="id_66">Типовой цикл работы менеджера памяти состоит в анализе запроса на выделение свободного участка (раздела), выборе его среди имеющихся в соответствии с одной из стратегий (первого подходящего, наиболее подходящего и наименее подходящего), загрузке процесса в выбранный раздел и последующих изменениях таблиц свободных и занятых областей. Аналогичная корректировка необходима и после завершения процесса. <span class="keyword">Связывание адресов</span> может осуществляться на этапах загрузки и выполнения.</p><div  class="lecture_mark" id="mark_66"></div><p  id="id_67">Этот метод более гибок по сравнению с методом <span class="keyword">фиксированных разделов</span>, однако ему присуща <a name="keyword-context.6"></a><span class="keyword_def">внешняя фрагментация</span> – наличие большого числа участков неиспользуемой памяти, не выделенной ни одному процессу. Выбор стратегии размещения процесса между первым подходящим и наиболее подходящим слабо влияет на величину <span class="keyword">фрагментации</span>. Любопытно, что метод наиболее подходящего может оказаться наихудшим, так как он оставляет множество мелких незанятых блоков.</p><div  class="lecture_mark" id="mark_67"></div><p  id="id_68">Статистический анализ показывает, что пропадает в среднем 1/3 памяти! Это известное правило 50% (два соседних свободных участка в отличие от двух соседних процессов могут быть объединены).</p><div  class="lecture_mark" id="mark_68"></div><p  id="id_69">Одно из решений проблемы <span class="keyword">внешней фрагментации</span> – организовать сжатие, то есть перемещение всех занятых (свободных) участков в сторону возрастания (убывания) адресов, так, чтобы вся свободная память образовала непрерывную область. Этот метод иногда называют схемой с перемещаемыми разделами. В идеале <span class="keyword">фрагментация</span> после сжатия должна отсутствовать. Сжатие, однако, является дорогостоящей процедурой, алгоритм выбора оптимальной стратегии сжатия очень труден и, как правило, сжатие осуществляется в комбинации с выгрузкой и загрузкой по другим адресам.</p><div  class="lecture_mark" id="mark_69"></div><h3 >Страничная память</h3><p  id="id_70">Описанные выше схемы недостаточно эффективно используют память, поэтому в современных схемах управления памятью не принято размещать процесс в <span class="keyword">оперативной памяти</span> одним непрерывным блоком. </p><div  class="lecture_mark" id="mark_70"></div><p  id="id_71">В самом простом и наиболее распространенном случае страничной организации памяти (или paging) как логическое <span class="keyword">адресное пространство</span>, так и физическое представляются состоящими из наборов блоков или <span class="keyword">страниц</span> одинакового размера. При этом образуются логические <span class="keyword">страницы</span> (page), а соответствующие единицы в <span class="keyword">физической памяти</span> называют физическими страницами или страничными кадрами (page frames). <span class="keyword">Страницы</span> (и страничные кадры) имеют фиксированную длину, обычно являющуюся степенью числа 2, и не могут перекрываться. Каждый кадр содержит одну <span class="keyword">страницу</span> данных. При такой организации <span class="keyword">внешняя фрагментация</span> отсутствует, а потери из-за <span class="keyword">внутренней фрагментации</span>, поскольку процесс занимает целое число <span class="keyword">страниц</span>, ограничены частью последней <span class="keyword">страницы</span> процесса.</p><div  class="lecture_mark" id="mark_71"></div><p  id="id_72">Логический адрес в страничной системе – упорядоченная пара (p,d), где p – номер <span class="keyword">страницы</span> в виртуальной памяти, а d – смещение в рамках <span class="keyword">страницы</span> p, на которой размещается адресуемый элемент. Заметим, что разбиение <span class="keyword">адресного пространства</span> на <span class="keyword">страницы</span> осуществляется вычислительной системой незаметно для программиста. Поэтому адрес является двумерным лишь с точки зрения операционной системы, а с точки зрения программиста <span class="keyword">адресное пространство</span> процесса остается линейным.</p><div  class="lecture_mark" id="mark_72"></div><p  id="id_73">Описываемая схема позволяет загрузить процесс, даже если нет непрерывной области кадров, достаточной для размещения процесса целиком. Но одного базового регистра для осуществления <span class="keyword">трансляции адреса</span> в данной схеме недостаточно. Система отображения логических адресов в физические сводится к системе отображения логических <span class="keyword">страниц</span> в физические и представляет собой таблицу <span class="keyword">страниц</span>, которая хранится в <span class="keyword">оперативной памяти</span>. Иногда говорят, что таблица <span class="keyword">страниц</span> – это кусочно-линейная функция отображения, заданная в табличном виде.</p><div  class="lecture_mark" id="mark_73"></div><p  id="id_74">Интерпретация логического адреса показана на <a href="">рис. 8.7</a>. Если выполняемый процесс обращается к логическому адресу v = (p,d), механизм отображения ищет номер <span class="keyword">страницы</span> p в таблице <span class="keyword">страниц</span> и определяет, что эта <span class="keyword">страница</span> находится в страничном кадре p', формируя реальный адрес из p' и d.</p><div  class="lecture_mark" id="mark_74"></div><p  align="left" id="id_75"><a name="image.8.7"></a><div><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/8-700000.gif" alt="Связь логического и физического адресов при страничной организации памяти" width="549" height="396"></div><br><b>Рис. 8.7.</b> 
        Связь логического и физического адресов при страничной организации памяти</p><div  class="lecture_mark" id="mark_75"></div><p  id="id_76">Таблица <span class="keyword">страниц</span> (page table) адресуется при помощи специального регистра процессора и позволяет определить номер кадра по логическому адресу. Помимо этой основной задачи, при помощи атрибутов, записанных в строке таблицы <span class="keyword">страниц</span>, можно организовать контроль доступа к конкретной <span class="keyword">странице</span> и ее защиту.</p><div  class="lecture_mark" id="mark_76"></div><p  id="id_77">Отметим еще раз различие точек зрения пользователя и системы на используемую память. С точки зрения пользователя, его память – единое непрерывное пространство, содержащее только одну программу. Реальное отображение скрыто от пользователя и контролируется ОС. Заметим, что процессу пользователя чужая память недоступна. Он не имеет возможности адресовать память за пределами своей таблицы <span class="keyword">страниц</span>, которая включает только его собственные <span class="keyword">страницы</span>.</p><div  class="lecture_mark" id="mark_77"></div><p  id="id_78">Для управления <span class="keyword">физической памятью</span> ОС поддерживает структуру таблицы кадров. Она имеет одну запись на каждый физический кадр, показывающий его состояние. </p><div  class="lecture_mark" id="mark_78"></div><p  id="id_79">Отображение адресов должно быть осуществлено корректно даже в сложных случаях и обычно реализуется аппаратно. Для ссылки на таблицу процессов используется специальный регистр. При переключении процессов необходимо найти таблицу <span class="keyword">страниц</span> нового процесса, указатель на которую входит в контекст процесса.</p><div  class="lecture_mark" id="mark_79"></div><h3 >Сегментная и сегментно-страничная организация памяти</h3><p  id="id_80">Существуют две другие схемы организации управления памятью: сегментная и сегментно-страничная. <span class="keyword">Сегменты</span>, в отличие от <span class="keyword">страниц</span>, могут иметь переменный размер. Идея сегментации изложена во введении. При сегментной организации виртуальный адрес является двумерным как для программиста, так и для операционной системы, и состоит из двух полей – номера <span class="keyword">сегмента</span> и смещения внутри <span class="keyword">сегмента</span>. Подчеркнем, <b>что в отличие от страничной организации, где линейный адрес преобразован в двумерный операционной системой для удобства отображения, здесь двумерность адреса является следствием представления пользователя о процессе не в виде линейного массива байтов, а как набор сегментов переменного размера (данные, код, стек...)</b>. </p><div  class="lecture_mark" id="mark_80"></div><p  id="id_81">Программисты, пишущие на языках низкого уровня, должны иметь представление о сегментной организации, явным образом меняя значения сегментных регистров (это хорошо видно по текстам программ, написанных на Ассемблере). Логическое <span class="keyword">адресное пространство</span> – набор <span class="keyword">сегментов</span>. Каждый <span class="keyword">сегмент</span> имеет имя, размер и другие параметры (уровень привилегий, разрешенные виды обращений, флаги присутствия). В отличие от страничной схемы, где пользователь задает только один адрес, который разбивается на номер <span class="keyword">страницы</span> и смещение прозрачным для программиста образом, в сегментной схеме пользователь специфицирует каждый адрес двумя величинами: именем <span class="keyword">сегмента</span> и смещением.</p><div  class="lecture_mark" id="mark_81"></div><p  id="id_82">Каждый <span class="keyword">сегмент</span> – линейная последовательность адресов, начинающаяся с 0. Максимальный размер <span class="keyword">сегмента</span> определяется разрядностью процессора (при 32-разрядной адресации это 2<sup>32</sup> байт или 4 Гбайт). Размер <span class="keyword">сегмента</span> может меняться динамически (например, <span class="keyword">сегмент</span> стека). В элементе таблицы <span class="keyword">сегментов</span> помимо физического адреса начала <span class="keyword">сегмента</span> обычно содержится и длина <span class="keyword">сегмента</span>. Если размер смещения в виртуальном адресе выходит за пределы размера <span class="keyword">сегмента</span>, возникает исключительная ситуация. </p><div  class="lecture_mark" id="mark_82"></div><p  id="id_83">Логический адрес – упорядоченная пара v=(s,d), номер <span class="keyword">сегмента</span> и смещение внутри <span class="keyword">сегмента</span>. </p><div  class="lecture_mark" id="mark_83"></div><p  id="id_84">В системах, где <span class="keyword">сегменты</span> поддерживаются аппаратно, эти параметры обычно хранятся в таблице дескрипторов <span class="keyword">сегментов</span>, а программа обращается к этим дескрипторам по номерам-селекторам. При этом в контекст каждого процесса входит набор сегментных регистров, содержащих селекторы текущих <span class="keyword">сегментов</span> кода, стека, данных и т. д. и определяющих, какие <span class="keyword">сегменты</span> будут использоваться при разных видах обращений к памяти. Это позволяет процессору уже на аппаратном уровне определять допустимость обращений к памяти, упрощая реализацию защиты информации от повреждения и несанкционированного доступа.</p><div  class="lecture_mark" id="mark_84"></div><p  align="left" id="id_85"><a name="image.8.8"></a><div><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/8-800000.gif" alt="Преобразование логического адреса при сегментной организации памяти" width="549" height="328"></div><br><b>Рис. 8.8.</b> 
        Преобразование логического адреса при сегментной организации памяти</p><div  class="lecture_mark" id="mark_85"></div><p  id="id_86">Аппаратная поддержка <span class="keyword">сегментов</span> распространена мало (главным образом на процессорах Intel). В большинстве ОС сегментация реализуется на уровне, не зависящем от аппаратуры. </p><div  class="lecture_mark" id="mark_86"></div><p  id="id_87">Хранить в памяти <span class="keyword">сегменты</span> большого размера целиком так же неудобно, как и хранить процесс непрерывным блоком. Напрашивается идея разбиения <span class="keyword">сегментов</span> на <span class="keyword">страницы</span>. При сегментно-страничной организации памяти происходит двухуровневая <span class="keyword">трансляция</span> виртуального адреса в физический. В этом случае логический адрес состоит из трех полей: номера <span class="keyword">сегмента</span>   <span class="keyword">логической памяти</span>, номера <span class="keyword">страницы</span> внутри <span class="keyword">сегмента</span> и смещения внутри <span class="keyword">страницы</span>. Соответственно, используются две таблицы отображения – таблица <span class="keyword">сегментов</span>, связывающая номер <span class="keyword">сегмента</span> с таблицей <span class="keyword">страниц</span>, и отдельная таблица <span class="keyword">страниц</span> для каждого <span class="keyword">сегмента</span>.</p><div  class="lecture_mark" id="mark_87"></div><p  align="left" id="id_88"><a name="image.8.9"></a><div><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/8-900000.gif" alt="Упрощенная схема формирования физического адреса при сегментно-страничной организации памяти" width="420" height="252"></div><br><b>Рис. 8.9.</b> 
        Упрощенная схема формирования физического адреса при сегментно-страничной организации памяти</p><div  class="lecture_mark" id="mark_88"></div><p  id="id_89">Сегментно-страничная и страничная организация памяти позволяет легко организовать совместное использование одних и тех же данных и программного кода разными задачами. Для этого различные логические блоки памяти разных процессов отображают в один и тот же блок <span class="keyword">физической памяти</span>, где размещается разделяемый фрагмент кода или данных.</p><div  class="lecture_mark" id="mark_89"></div><h3 >Заключение</h3><p  id="id_90">В настоящей лекции описаны простейшие способы управления памятью в ОС. <span class="keyword">Физическая память</span> компьютера имеет <span class="keyword">иерархическую</span> структуру. Программа представляет собой набор <span class="keyword">сегментов</span> в логическом <span class="keyword">адресном пространстве</span>. ОС осуществляет <span class="keyword">связывание</span> логических и физических <span class="keyword">адресных пространств</span>. В последующих лекциях будут рассматриваться современные решения, связанные с поддержкой виртуальной памяти.</p><div  class="lecture_mark" id="mark_90"></div>


	</td>
	</tr>
	<tr><td height="8"><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="8"></td></tr>
	</table>
	<!-- /content -->

</td>
<td><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="8" height="1"></td>
</tr>
</table>
<!-- /bottom -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr><td class="orang" height="1"><img src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/empty000.gif" width="1" height="1"></td></tr>
<td class="ltxt" align=center>&copy; INTUIT.ru, 2003-2008. Все права защищены.</td>
</tr>
</table>
<!-- /bottom -->

<script src="8. Организация памяти компьютера. Простейшие схемы управления памятью_files/urchin00.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-3475067-1";
urchinTracker();
</script></body>
</html>


<!-- This document saved from http://www.intuit.ru/department/os/osintro/8/osintro_8.html -->
